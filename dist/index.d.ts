// Generated by dts-bundle-generator v5.9.0

/// <reference types="node" />

export interface ICard {
	/**
	 * The name of the card specified within the deck.
	 */
	amount: number;
	/**
	 * The amount of the card specified within the deck.
	 */
	name: string;
	/**
	 * The set code of the card.
	 */
	set?: string;
	/**
	 * The collector number of the card within the specific set.
	 */
	collectors?: number;
	/**
	 * The ID of the card specific to MTG Online.
	 */
	mtgoID?: string;
}
export interface ICardXmlObject {
	Quantity: string;
	Name: string;
	CatID: string;
}
export interface IDeck {
	/**
	 * An array of `CardModel` for the main deck.
	 */
	deck: CardModel[];
	/**
	 * An array of `CardModel` for the sideboard.
	 */
	sideboard: CardModel[];
	/**
	 * If a companion is specified in the input will be available, otherwise null.
	 */
	companion?: CardModel;
	/**
	 * If a commander is specified in the input will be available, otherwise null.
	 */
	commander?: CardModel;
}
export declare class CardModel implements ICard {
	name: string;
	amount: number;
	set?: string;
	collectors?: number;
	mtgoID?: string;
	constructor(rawInput: string | ICardXmlObject);
	protected parseString(rawInput: string): ICard;
	protected parseObject(rawInputObject: ICardXmlObject): ICard;
	toCardString(): string;
}
declare abstract class Deck implements IDeck {
	/**
	 * If the parsing of the decklist was successful. Note: this does not necessarily mean the input was well formed.
	 */
	readonly valid: boolean;
	/**
	 * An array of `CardModel` for the main deck.
	 */
	deck: CardModel[];
	/**
	 * An array of `CardModel` for the sideboard.
	 */
	sideboard: CardModel[];
	/**
	 * If a companion is specified in the input will be available, otherwise null.
	 */
	companion?: CardModel;
	/**
	 * If a commander is specified in the input will be available, otherwise null.
	 */
	commander?: CardModel;
	toDeckListString(): string;
}
export declare class Decklist extends Deck {
	constructor(rawInput: string | Uint8Array);
}
export declare class MTGO extends Deck {
	constructor(xml: string | Uint8Array, logError?: boolean);
}
export declare function parseString(rawInput: string): ICard;
export declare function toCardString(card: ICard): string;
export declare function toDeckListString(deck: IDeck): string;
export declare function autoParse(rawInput: string | Uint8Array): MTGO | Decklist;
export default autoParse;

export {};
